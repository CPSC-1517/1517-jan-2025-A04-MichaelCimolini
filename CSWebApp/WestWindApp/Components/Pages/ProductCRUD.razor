@page "/productcrud/{ProductID:int?}"

@using WestWindSystem.Entities
@using WestWindSystem.BLL

<PageTitle>Product CRUD</PageTitle>

@rendermode InteractiveServer

<h1>Product CRUD</h1>

@if (FeedbackMessage != String.Empty)
{
    <div class="alert alert-info">
        @FeedbackMessage
    </div>
}

<!--Edit Form for CRUD-->
<EditForm EditContext="_EditContext">
    <!--Enables validion in our Entities.-->
    <DataAnnotationsValidator/>
    <!--Catches and displays any validation errors in our Form.-->
    <ValidationSummary/>

    <fieldset>
        <label for="productID">Product ID</label>
        <!--Read Only as our Database handles our Key-->
        <InputNumber id="productID" @bind-value="CurrentProduct.ProductID" readonly/>

        <label for="name">Name</label>
        <InputText id="name" @bind-Value="CurrentProduct.ProductName"/>
        <!--Validates and shows error inline. Must come immediately after the Input-->
        <ValidationMessage for="@(() => CurrentProduct.ProductName)"/>

        <label for="supplier">Supplier ID</label>
        <InputSelect id="supplier" @bind-Value="CurrentProduct.SupplierID">
            <option value="0">..Select..</option>
            @foreach(Supplier item in Suppliers)
            {
                <!--Selected allows us to select the SupplierID that matches the one passed in from our search page.-->
                <option value="@item.SupplierID"
                selected="@(item.SupplierID == CurrentProduct.SupplierID)">
                    @item.CompanyName
                </option>
            }
        </InputSelect>

        <label for="category">Category</label>
        <InputSelect id="category" @bind-Value="CurrentProduct.CategoryID">
            <option value="0">..Select..</option>
            @foreach (Category item in Categories)
            {
                <!--Selected allows us to select the SupplierID that matches the one passed in from our search page.-->
                <option value="@item.CategoryID"
                selected="@(item.CategoryID == CurrentProduct.CategoryID)">
                    @item.CategoryName
                </option>
            }
        </InputSelect>

        <label for="qty">Qty / Unit</label>
        <InputText id="qty" @bind-Value="CurrentProduct.QuantityPerUnit"/>

        <label id="unitprice">Unit Price</label>
        <InputNumber id="unitprice" @bind-Value="CurrentProduct.UnitPrice"/>
        <ValidationMessage For="@(() => CurrentProduct.UnitPrice)" />

        <label id="minorder">Min Order Qty</label>
        <InputNumber id="minorder" @bind-Value="CurrentProduct.MinimumOrderQuantity" />

        <label id="units">Units on Order</label>
        <InputNumber id="units" @bind-Value="CurrentProduct.UnitsOnOrder" />
    </fieldset>

    <fieldset>

        <button type="submit" @onclick="OnCreate">Create</button>

        <button type="submit" @onclick="OnUpdate">Update</button>

        @if (CurrentProduct.Discontinued)
        {
            <button type="submit" @onclick="OnActivated">Activate</button>
        }
        else
        {
            <button type="submit" @onclick="OnDiscontinue">Discontinue</button>
        }

        <button type="button" @onclick="OnClear">Clear</button>

        <button type="button" @onclick="GoToSearch">Search</button>

    </fieldset>

</EditForm>

@code {

    [Parameter]
    public int? ProductID { get; set; }

    private string? FeedbackMessage = String.Empty;

    [Inject]
    private ProductServices _ProductServices { get; set; }

    [Inject]
    private CategoryServices _CategoryServices { get; set; }

    [Inject]
    private SupplierServices _SupplierServices { get; set; }

    private Product CurrentProduct = new();

    //Can not be initialized here. Must happen in OnInitialize.
    private EditContext _EditContext;
    private ValidationMessageStore _ValidationMessageStore;

    private List<Category> Categories = new();
    private List<Supplier> Suppliers = new();

    private int SelectedCategoryId;


    [Inject]
    protected NavigationManager NavManager { get; set; }

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    protected override void OnInitialized()
    {
        Categories = _CategoryServices.GetAllCategories();
        Suppliers = _SupplierServices.GetAllSuppliers();

        //Use .HasValue as our ProductID int is nullable
        if (ProductID.HasValue)
        {
            //Becuase ProductID is nullable, we have to use .Value
            CurrentProduct = _ProductServices.GetProductByID(ProductID.Value);

            //Could add error handling for Null;
        }

        _EditContext = new(CurrentProduct);
        _ValidationMessageStore = new(_EditContext);

        base.OnInitialized(); 
    }

    private void Clear()
    {
        FeedbackMessage = String.Empty;
        _ValidationMessageStore.Clear();
    }

    #region CRUD Methods

    private void OnCreate()
    {
        Clear();

        try
        {
            //Validate that there are no errors in our form
            if (_EditContext.Validate())
            {
                //Need to do some data validation
                if(CurrentProduct.CategoryID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //.Field allows us to access any of the Inputs in our EditFrom through the @bind-value
                    //nameof gets our Variable name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.CategoryID)), "You must select a Category.");
                }

                if (CurrentProduct.SupplierID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //.Field allows us to access any of the Inputs in our EditFrom through the @bind-value
                    //nameof gets our Variable name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.SupplierID)), "You must select a Supplier.");
                }

                //We could add any other validation here

                //Check if there were any new errors
                //.Any is a LINQ statement that check if there is anything in the queried collection
                if(_EditContext.GetValidationMessages().Any())
                {
                    //Tell our form that there are new errors and to update.
                    _EditContext.NotifyValidationStateChanged();
                }

                //If there are no errors, assume our data is good and push it to the database.
                else
                {
                    int newProductID = _ProductServices.AddProduct(CurrentProduct);

                    FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {newProductID} has been saved.";
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            FeedbackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            FeedbackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            FeedbackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    private void OnUpdate()
    {
        Clear();

        try
        {
            //Validate that there are no errors in our form
            if (_EditContext.Validate())
            {
                //Need to do some data validation
                if (CurrentProduct.CategoryID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //.Field allows us to access any of the Inputs in our EditFrom through the @bind-value
                    //nameof gets our Variable name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.CategoryID)), "You must select a Category.");
                }

                if (CurrentProduct.SupplierID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //.Field allows us to access any of the Inputs in our EditFrom through the @bind-value
                    //nameof gets our Variable name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.SupplierID)), "You must select a Supplier.");
                }

                //We could add any other validation here

                //Check if there were any new errors
                //.Any is a LINQ statement that check if there is anything in the queried collection
                if (_EditContext.GetValidationMessages().Any())
                {
                    //Tell our form that there are new errors and to update.
                    _EditContext.NotifyValidationStateChanged();
                }

                //If there are no errors, assume our data is good and push it to the database.
                else
                {
                    int affectedRows = _ProductServices.UpdateProduct(CurrentProduct);

                    if (affectedRows == 0)
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has not been updated.";
                    }
                    else
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has been updated.";
                    }
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            FeedbackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            FeedbackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            FeedbackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    /// <summary>
    /// Logical Delete
    /// </summary>
    private void OnDiscontinue()
    {
        Clear();

        try
        {
            //Validate that there are no errors in our form
            if (_EditContext.Validate())
            {
                //Need to do some data validation
                if (CurrentProduct.CategoryID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //.Field allows us to access any of the Inputs in our EditFrom through the @bind-value
                    //nameof gets our Variable name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.CategoryID)), "You must select a Category.");
                }

                if (CurrentProduct.SupplierID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //.Field allows us to access any of the Inputs in our EditFrom through the @bind-value
                    //nameof gets our Variable name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.SupplierID)), "You must select a Supplier.");
                }

                //We could add any other validation here

                //Check if there were any new errors
                //.Any is a LINQ statement that check if there is anything in the queried collection
                if (_EditContext.GetValidationMessages().Any())
                {
                    //Tell our form that there are new errors and to update.
                    _EditContext.NotifyValidationStateChanged();
                }

                //If there are no errors, assume our data is good and push it to the database.
                else
                {
                    int affectedRows = _ProductServices.DiscontinueProduct(CurrentProduct);

                    if (affectedRows == 0)
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has not been discontinued.";
                    }
                    else
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has been discontinued.";
                    }
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            FeedbackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            FeedbackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            FeedbackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    private void OnActivated()
    {
        Clear();

        try
        {
            //Validate that there are no errors in our form
            if (_EditContext.Validate())
            {
                //Need to do some data validation
                if (CurrentProduct.CategoryID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //.Field allows us to access any of the Inputs in our EditFrom through the @bind-value
                    //nameof gets our Variable name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.CategoryID)), "You must select a Category.");
                }

                if (CurrentProduct.SupplierID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //.Field allows us to access any of the Inputs in our EditFrom through the @bind-value
                    //nameof gets our Variable name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.SupplierID)), "You must select a Supplier.");
                }

                //We could add any other validation here

                //Check if there were any new errors
                //.Any is a LINQ statement that check if there is anything in the queried collection
                if (_EditContext.GetValidationMessages().Any())
                {
                    //Tell our form that there are new errors and to update.
                    _EditContext.NotifyValidationStateChanged();
                }

                //If there are no errors, assume our data is good and push it to the database.
                else
                {
                    int affectedRows = _ProductServices.ActivateProduct(CurrentProduct);

                    if (affectedRows == 0)
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has not been activated.";
                    }
                    else
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has been activated.";
                    }
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            FeedbackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            FeedbackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            FeedbackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }


    #endregion

    private async Task OnClear()
    {
        if(await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear the form?"))
        {
            Clear();

            CurrentProduct = new();

            //Update our EditContext as they are specific to the instance of our Product
            //Critical to do this or your form won't work
            _EditContext = new EditContext(CurrentProduct);
        }
    }

    private async Task GoToSearch()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this page?"))
        {
            Clear();

            NavManager.NavigateTo("categoryproducts");
        }
    }

    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }
}
